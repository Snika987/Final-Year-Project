# -*- coding: utf-8 -*-
"""RAG_Colon Cancer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d77CzBmgzUMO8FERt_rFciBA2Wx6WTl5
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/RAG/DATA

# Commented out IPython magic to ensure Python compatibility.
# %ls

!pip install -U langchain langchain_mistralai chromadb transformers sentence-transformers langchain-community langchain_huggingface
!pip install langchain pypdf huggingface_hub faiss-cpu
!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu117
!pip install --upgrade transformers langchain langchain-huggingface

"""# **Login**"""

from google.colab import userdata
import os

os.environ['MISTRAL_API_KEY'] = "HTe6oEWFHbBraLCmI1Xwk7GLAJePCtYz"
os.environ['HUGGINGFACEHUB_API_TOKEN'] = "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"

"""# **Load documents**"""

import os
from langchain.document_loaders import PyPDFDirectoryLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter

def load_docs(directory):
  loader = PyPDFDirectoryLoader(directory)
  documents = loader.load()
  return documents

directory = '.'

documents = load_docs(directory)

len(documents)

for doc in documents[:3]:
  print("Document text:")
  print(None)
  print("Document metadata:")
  print(None)
  print("--"*100)

"""## **Split documents**"""

# split the documents into chunks
def split_docs(documents, chunk_size=512, chunk_overlap=20):
  text_splitter = RecursiveCharacterTextSplitter(
      chunk_size = chunk_size,
      chunk_overlap = chunk_overlap,
      separators=["\n\n", "\n", " ", ""]
      )
  docs = text_splitter.split_documents(documents)
  return docs

docs = split_docs(documents)

print(len(docs))

for doc in docs[:5]:
  print("Document text:")
  print(doc.page_content)
  print("Document metadata:")
  print(doc.metadata)
  print("--"*100)

"""# **Text embeddings**"""

from langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddings

embeddings = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")

query_result = embeddings.embed_query("Hello world")

len(query_result)

query_result[:5]

"""# **VectorStore**"""

from langchain import FAISS

index = FAISS.from_documents(docs, embeddings)

"""## **Similar docs**"""

def get_similiar_docs(query, k=4):
    similar_docs = index.similarity_search(query, k=k)
    return similar_docs

similar_docs = get_similiar_docs("What is colon cancer?")

for doc in similar_docs:
  print("Document text:")
  print(doc.page_content)
  print("--"*100)

"""# **Question Answering**"""

from langchain.chains.question_answering import load_qa_chain

from langchain_mistralai import ChatMistralAI

llm = ChatMistralAI(
    model="mistral-large-latest",
    temperature=0.7,
    max_tokens=150
)

from langchain.prompts import PromptTemplate

med_prompt = PromptTemplate.from_template(
    """
    You are an expert medical assistant.
    Based only on the summaries provided below, answer the given question.
    Give all details as much as possible.
    If you don't know the answer, respond with "I don't know".
    Do not generate new questions.
    Do not make up your own answer from outside the source material.
    Do not write anything after the answer.

    Source material: {context}

    Question: {question}
    Answer:
    """
)

chain = med_prompt | llm

def get_answer(query):
  relevant_docs = get_similiar_docs(query)

  response = chain.invoke(
      {
          "context": relevant_docs,
          "question": query
      }
  )

  return response

our_query = "What is Colon Cancer?"

answer = get_answer(our_query)

print(answer.content)

our_query = "What diet should I follow now?"
answer = get_answer(our_query)

print(answer.content)

our_query = "What is the recommended treatement for colon cancer?"

answer = get_answer(our_query)

print(answer.content)

our_query = "What are the survivial rates?"

answer = get_answer(our_query)

print(answer.content)

our_query = "What precuaitons should I take?"

answer = get_answer(our_query)

print(answer.content)

